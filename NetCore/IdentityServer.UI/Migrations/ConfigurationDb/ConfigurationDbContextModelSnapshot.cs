// <auto-generated />
using IdentityServer4.EntityFramework.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

#nullable disable

namespace IdentityServer.Migrations.ConfigurationDb
{
   [DbContext(typeof(ConfigurationDbContext))]
   partial class ConfigurationDbContextModelSnapshot : ModelSnapshot
   {
      protected override void BuildModel(ModelBuilder modelBuilder)
      {
#pragma warning disable 612, 618
         modelBuilder
             .HasAnnotation("ProductVersion", "7.0.0")
             .HasAnnotation("Relational:MaxIdentifierLength", 128);

         SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                       .HasMaxLength(100)
                       .HasColumnType("nvarchar(100)");

                b.Property<DateTime>("Created")
                       .HasColumnType("datetime2");

                b.Property<string>("Description")
                       .HasMaxLength(1000)
                       .HasColumnType("nvarchar(1000)");

                b.Property<string>("DisplayName")
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<bool>("Enabled")
                       .HasColumnType("bit");

                b.Property<DateTime?>("LastAccessed")
                       .HasColumnType("datetime2");

                b.Property<string>("Name")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<bool>("NonEditable")
                       .HasColumnType("bit");

                b.Property<bool>("ShowInDiscoveryDocument")
                       .HasColumnType("bit");

                b.Property<DateTime?>("Updated")
                       .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("Name")
                       .IsUnique();

                b.ToTable("ApiResources", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ApiResourceId")
                       .HasColumnType("int");

                b.Property<string>("Type")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("ApiResourceId");

                b.ToTable("ApiResourceClaims", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ApiResourceId")
                       .HasColumnType("int");

                b.Property<string>("Key")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.HasKey("Id");

                b.HasIndex("ApiResourceId");

                b.ToTable("ApiResourceProperties", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceScope", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ApiResourceId")
                       .HasColumnType("int");

                b.Property<string>("Scope")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("ApiResourceId");

                b.ToTable("ApiResourceScopes", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceSecret", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ApiResourceId")
                       .HasColumnType("int");

                b.Property<DateTime>("Created")
                       .HasColumnType("datetime2");

                b.Property<string>("Description")
                       .HasMaxLength(1000)
                       .HasColumnType("nvarchar(1000)");

                b.Property<DateTime?>("Expiration")
                       .HasColumnType("datetime2");

                b.Property<string>("Type")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(4000)
                       .HasColumnType("nvarchar(4000)");

                b.HasKey("Id");

                b.HasIndex("ApiResourceId");

                b.ToTable("ApiResourceSecrets", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Description")
                       .HasMaxLength(1000)
                       .HasColumnType("nvarchar(1000)");

                b.Property<string>("DisplayName")
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<bool>("Emphasize")
                       .HasColumnType("bit");

                b.Property<bool>("Enabled")
                       .HasColumnType("bit");

                b.Property<string>("Name")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<bool>("Required")
                       .HasColumnType("bit");

                b.Property<bool>("ShowInDiscoveryDocument")
                       .HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("Name")
                       .IsUnique();

                b.ToTable("ApiScopes", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ScopeId")
                       .HasColumnType("int");

                b.Property<string>("Type")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("ScopeId");

                b.ToTable("ApiScopeClaims", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeProperty", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("Key")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<int>("ScopeId")
                       .HasColumnType("int");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.HasKey("Id");

                b.HasIndex("ScopeId");

                b.ToTable("ApiScopeProperties", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("AbsoluteRefreshTokenLifetime")
                       .HasColumnType("int");

                b.Property<int>("AccessTokenLifetime")
                       .HasColumnType("int");

                b.Property<int>("AccessTokenType")
                       .HasColumnType("int");

                b.Property<bool>("AllowAccessTokensViaBrowser")
                       .HasColumnType("bit");

                b.Property<bool>("AllowOfflineAccess")
                       .HasColumnType("bit");

                b.Property<bool>("AllowPlainTextPkce")
                       .HasColumnType("bit");

                b.Property<bool>("AllowRememberConsent")
                       .HasColumnType("bit");

                b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                       .HasMaxLength(100)
                       .HasColumnType("nvarchar(100)");

                b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                       .HasColumnType("bit");

                b.Property<bool>("AlwaysSendClientClaims")
                       .HasColumnType("bit");

                b.Property<int>("AuthorizationCodeLifetime")
                       .HasColumnType("int");

                b.Property<bool>("BackChannelLogoutSessionRequired")
                       .HasColumnType("bit");

                b.Property<string>("BackChannelLogoutUri")
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.Property<string>("ClientClaimsPrefix")
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<string>("ClientId")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<string>("ClientName")
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<string>("ClientUri")
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.Property<int?>("ConsentLifetime")
                       .HasColumnType("int");

                b.Property<DateTime>("Created")
                       .HasColumnType("datetime2");

                b.Property<string>("Description")
                       .HasMaxLength(1000)
                       .HasColumnType("nvarchar(1000)");

                b.Property<int>("DeviceCodeLifetime")
                       .HasColumnType("int");

                b.Property<bool>("EnableLocalLogin")
                       .HasColumnType("bit");

                b.Property<bool>("Enabled")
                       .HasColumnType("bit");

                b.Property<bool>("FrontChannelLogoutSessionRequired")
                       .HasColumnType("bit");

                b.Property<string>("FrontChannelLogoutUri")
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.Property<int>("IdentityTokenLifetime")
                       .HasColumnType("int");

                b.Property<bool>("IncludeJwtId")
                       .HasColumnType("bit");

                b.Property<DateTime?>("LastAccessed")
                       .HasColumnType("datetime2");

                b.Property<string>("LogoUri")
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.Property<bool>("NonEditable")
                       .HasColumnType("bit");

                b.Property<string>("PairWiseSubjectSalt")
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<string>("ProtocolType")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<int>("RefreshTokenExpiration")
                       .HasColumnType("int");

                b.Property<int>("RefreshTokenUsage")
                       .HasColumnType("int");

                b.Property<bool>("RequireClientSecret")
                       .HasColumnType("bit");

                b.Property<bool>("RequireConsent")
                       .HasColumnType("bit");

                b.Property<bool>("RequirePkce")
                       .HasColumnType("bit");

                b.Property<bool>("RequireRequestObject")
                       .HasColumnType("bit");

                b.Property<int>("SlidingRefreshTokenLifetime")
                       .HasColumnType("int");

                b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                       .HasColumnType("bit");

                b.Property<DateTime?>("Updated")
                       .HasColumnType("datetime2");

                b.Property<string>("UserCodeType")
                       .HasMaxLength(100)
                       .HasColumnType("nvarchar(100)");

                b.Property<int?>("UserSsoLifetime")
                       .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ClientId")
                       .IsUnique();

                b.ToTable("Clients", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("Type")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientClaims", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("Origin")
                       .IsRequired()
                       .HasMaxLength(150)
                       .HasColumnType("nvarchar(150)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientCorsOrigins", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("GrantType")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientGrantTypes", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("Provider")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientIdPRestrictions", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("PostLogoutRedirectUri")
                       .IsRequired()
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientPostLogoutRedirectUris", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("Key")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientProperties", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("RedirectUri")
                       .IsRequired()
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientRedirectUris", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<string>("Scope")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientScopes", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("ClientId")
                       .HasColumnType("int");

                b.Property<DateTime>("Created")
                       .HasColumnType("datetime2");

                b.Property<string>("Description")
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.Property<DateTime?>("Expiration")
                       .HasColumnType("datetime2");

                b.Property<string>("Type")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(4000)
                       .HasColumnType("nvarchar(4000)");

                b.HasKey("Id");

                b.HasIndex("ClientId");

                b.ToTable("ClientSecrets", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<DateTime>("Created")
                       .HasColumnType("datetime2");

                b.Property<string>("Description")
                       .HasMaxLength(1000)
                       .HasColumnType("nvarchar(1000)");

                b.Property<string>("DisplayName")
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<bool>("Emphasize")
                       .HasColumnType("bit");

                b.Property<bool>("Enabled")
                       .HasColumnType("bit");

                b.Property<string>("Name")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.Property<bool>("NonEditable")
                       .HasColumnType("bit");

                b.Property<bool>("Required")
                       .HasColumnType("bit");

                b.Property<bool>("ShowInDiscoveryDocument")
                       .HasColumnType("bit");

                b.Property<DateTime?>("Updated")
                       .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("Name")
                       .IsUnique();

                b.ToTable("IdentityResources", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceClaim", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("IdentityResourceId")
                       .HasColumnType("int");

                b.Property<string>("Type")
                       .IsRequired()
                       .HasMaxLength(200)
                       .HasColumnType("nvarchar(200)");

                b.HasKey("Id");

                b.HasIndex("IdentityResourceId");

                b.ToTable("IdentityResourceClaims", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
             {
                b.Property<int>("Id")
                       .ValueGeneratedOnAdd()
                       .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<int>("IdentityResourceId")
                       .HasColumnType("int");

                b.Property<string>("Key")
                       .IsRequired()
                       .HasMaxLength(250)
                       .HasColumnType("nvarchar(250)");

                b.Property<string>("Value")
                       .IsRequired()
                       .HasMaxLength(2000)
                       .HasColumnType("nvarchar(2000)");

                b.HasKey("Id");

                b.HasIndex("IdentityResourceId");

                b.ToTable("IdentityResourceProperties", (string)null);
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                       .WithMany("UserClaims")
                       .HasForeignKey("ApiResourceId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("ApiResource");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                       .WithMany("Properties")
                       .HasForeignKey("ApiResourceId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("ApiResource");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceScope", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                       .WithMany("Scopes")
                       .HasForeignKey("ApiResourceId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("ApiResource");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceSecret", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                       .WithMany("Secrets")
                       .HasForeignKey("ApiResourceId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("ApiResource");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                       .WithMany("UserClaims")
                       .HasForeignKey("ScopeId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Scope");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeProperty", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                       .WithMany("Properties")
                       .HasForeignKey("ScopeId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Scope");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("Claims")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("AllowedCorsOrigins")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("AllowedGrantTypes")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("IdentityProviderRestrictions")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("PostLogoutRedirectUris")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("Properties")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("RedirectUris")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("AllowedScopes")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                       .WithMany("ClientSecrets")
                       .HasForeignKey("ClientId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("Client");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceClaim", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                       .WithMany("UserClaims")
                       .HasForeignKey("IdentityResourceId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("IdentityResource");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
             {
                b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                       .WithMany("Properties")
                       .HasForeignKey("IdentityResourceId")
                       .OnDelete(DeleteBehavior.Cascade)
                       .IsRequired();

                b.Navigation("IdentityResource");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
             {
                b.Navigation("Properties");

                b.Navigation("Scopes");

                b.Navigation("Secrets");

                b.Navigation("UserClaims");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
             {
                b.Navigation("Properties");

                b.Navigation("UserClaims");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
             {
                b.Navigation("AllowedCorsOrigins");

                b.Navigation("AllowedGrantTypes");

                b.Navigation("AllowedScopes");

                b.Navigation("Claims");

                b.Navigation("ClientSecrets");

                b.Navigation("IdentityProviderRestrictions");

                b.Navigation("PostLogoutRedirectUris");

                b.Navigation("Properties");

                b.Navigation("RedirectUris");
             });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
             {
                b.Navigation("Properties");

                b.Navigation("UserClaims");
             });
#pragma warning restore 612, 618
         #region Identity
         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityRole", b =>
         {
            b.Property<string>("Id")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("ConcurrencyStamp")
                .IsConcurrencyToken()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Name")
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)");

            b.Property<string>("NormalizedName")
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)");

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                .IsUnique()
                .HasDatabaseName("RoleNameIndex")
                .HasFilter("[NormalizedName] IS NOT NULL");

            b.ToTable("AspNetRoles", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityRoleClaim<string>", b =>
         {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

            b.Property<string>("ClaimType")
                .HasColumnType("nvarchar(max)");

            b.Property<string>("ClaimValue")
                .HasColumnType("nvarchar(max)");

            b.Property<string>("RoleId")
                .IsRequired()
                .HasColumnType("nvarchar(450)");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUser", b =>
         {
            b.Property<string>("Id")
                .HasColumnType("nvarchar(450)");

            b.Property<int>("AccessFailedCount")
                .HasColumnType("int");

            b.Property<string>("ConcurrencyStamp")
                .IsConcurrencyToken()
                .HasColumnType("nvarchar(max)");

            b.Property<string>("Email")
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)");

            b.Property<bool>("EmailConfirmed")
                .HasColumnType("bit");

            b.Property<bool>("LockoutEnabled")
                .HasColumnType("bit");

            b.Property<DateTimeOffset?>("LockoutEnd")
                .HasColumnType("datetimeoffset");

            b.Property<string>("NormalizedEmail")
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)");

            b.Property<string>("NormalizedUserName")
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)");

            b.Property<string>("PasswordHash")
                .HasColumnType("nvarchar(max)");

            b.Property<string>("PhoneNumber")
                .HasColumnType("nvarchar(max)");

            b.Property<bool>("PhoneNumberConfirmed")
                .HasColumnType("bit");

            b.Property<string>("SecurityStamp")
                .HasColumnType("nvarchar(max)");

            b.Property<bool>("TwoFactorEnabled")
                .HasColumnType("bit");

            b.Property<string>("UserName")
                .HasMaxLength(256)
                .HasColumnType("nvarchar(256)");

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                .HasDatabaseName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                .IsUnique()
                .HasDatabaseName("UserNameIndex")
                .HasFilter("[NormalizedUserName] IS NOT NULL");

            b.ToTable("AspNetUsers", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserClaim<string>", b =>
         {
            b.Property<int>("Id")
                .ValueGeneratedOnAdd()
                .HasColumnType("int");

            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

            b.Property<string>("ClaimType")
                .HasColumnType("nvarchar(max)");

            b.Property<string>("ClaimValue")
                .HasColumnType("nvarchar(max)");

            b.Property<string>("UserId")
                .IsRequired()
                .HasColumnType("nvarchar(450)");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserLogin<string>", b =>
         {
            b.Property<string>("LoginProvider")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("ProviderKey")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("ProviderDisplayName")
                .HasColumnType("nvarchar(max)");

            b.Property<string>("UserId")
                .IsRequired()
                .HasColumnType("nvarchar(450)");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserRole<string>", b =>
         {
            b.Property<string>("UserId")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("RoleId")
                .HasColumnType("nvarchar(450)");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserToken<string>", b =>
         {
            b.Property<string>("UserId")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("LoginProvider")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("Name")
                .HasColumnType("nvarchar(450)");

            b.Property<string>("Value")
                .HasColumnType("nvarchar(max)");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens", (string)null);
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityRoleClaim<string>", b =>
         {
            b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityRole", null)
                .WithMany()
                .HasForeignKey("RoleId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserClaim<string>", b =>
         {
            b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserLogin<string>", b =>
         {
            b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserRole<string>", b =>
         {
            b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityRole", null)
                .WithMany()
                .HasForeignKey("RoleId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
         });

         modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityUserToken<string>", b =>
         {
            b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityUser", null)
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
         });
         #endregion
      }
   }
}
